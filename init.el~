;;; -*- lexical-binding: t -*-

;; package manager

;; if online failed, choose manual way to install

;; mkdir .emacs.d/straight/repos
;; cd .emacs.d/straight/repos
;; git clone https://github.com/radian-software/straight.el


(setq url-proxy-services '(("http" . "127.0.0.1:7890")
                           ("https" . "127.0.0.1:7890")))

;; online way
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://radian-software.github.io/straight.el/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq package-enable-at-startup nil)

(straight-use-package 'use-package)



;; interface
(menu-bar-mode 1)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(blink-cursor-mode 0)
(setq-default cursor-type 'bar)
(setq inhibit-startup-screen nil)
(setq-default indent-tabs-mode nil)
(setq show-paren-delay 0)
(show-paren-mode)
(setq visible-bell t)
(setq tab-always-indent 'complete)
(setq scroll-conservatively 10
      scroll-margin 20)

;; theme
(use-package modus-themes
  :straight t
  :demand t
  :init
  (modus-themes-include-derivatives-mode 1)
  :config
  (setq modus-themes-custom-auto-reload nil
        modus-themes-to-toggle '(modus-operandi modus-vivendi)
        modus-themes-to-rotate modus-themes-items
        modus-themes-mixed-fonts t
        modus-themes-variable-pitch-ui t
        modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-completions '((t . (bold)))
        modus-themes-prompts '(bold)
        modus-themes-headings
        '((agenda-structure . (variable-pitch light 2.2))
          (agenda-date . (variable-pitch regular 1.3))
          (t . (regular 1.15))))

  (setq modus-themes-common-palette-overrides nil)

  ;; Finally, load your theme of choice (or a random one with
  ;; `modus-themes-load-random', `modus-themes-load-random-dark',
  ;; `modus-themes-load-random-light').
  (modus-themes-load-theme (modus-themes-load-random-dark)))

;; m-x
(use-package which-key
  :straight t)
(which-key-mode t)

(use-package repeat
  :custom
  (repeat-mode +1))


;; status bar
(use-package telephone-line
  :straight t)

(setq telephone-line-lhs
        '((accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (
                     telephone-line-buffer-segment
                     telephone-line-position-segment))))
(setq telephone-line-rhs
      '((nil    . (telephone-line-misc-info-segment
                   ))
          (accent . (telephone-line-major-mode-segment))))

(telephone-line-mode t)


;; save and backup files
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
      kept-new-versions 2
      kept-old-versions 2
      version-control t)

(add-function :after after-focus-change-function (lambda () (save-some-buffers t)))



;; font
(use-package fontaine
  :straight t)

(setq fontaine-latest-state-file
      (locate-user-emacs-file "fontaine-latest-state.eld"))

(setq fontaine-presets
      '((regular
         :default-height 120)
        (low-res
         :default-height 108)
        (t
         :default-family "Aporetic Sans Mono"
         :default-weight regular
         :default-height 128

         :bold-weight bold
         :italic-slant italic
         :line-spacing nil)))
(fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))

(fontaine-mode 1)



;; cpp

;; which lsp

(use-package company
  :straight t
  :hook ((c-mode c++-mode) . company-mode)
  :bind
  ("M-/" . company-complete)
  :config
  (setq lsp-completion-provider :capf)
  (setq company-backends '(company-capf))
  (setq company-transformers nil)
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 2)
  (setq company-selection-wrap-around 1)
  )
(add-hook 'after-init-hook 'company-tng-mode)

(use-package eglot
  :hook ((c-mode c++-mode) . 'eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs '((c-mode c++-mode) "clangd")))

(use-package ninja-mode
  :straight t)

(use-package rainbow-delimiters
  :straight t)
;(add-hook 'c-mode-hook 'rainbow-delimiters-mode)
;(add-hook 'c++-mode-hook 'rainbow-delimiters-mode)


(use-package tree-sitter
  :straight t)

(use-package tree-sitter-langs
  :straight t)

(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
(global-tree-sitter-mode)


(use-package idle-highlight-mode
  :straight t
  :hook ((c-mode c++-mode) . idle-highlight-mode)
  )


(add-hook 'c++-mode-hook 'electric-pair-mode)
(add-hook 'c++-mode-hook 'subword-mode)
(add-hook 'c++-mode-hook 'hl-line-mode)
(add-hook 'c++-mode-hook 'display-line-numbers-mode)
(add-hook 'c++-mode-hook (lambda ()
                           (c-toggle-hungry-state 1)
                           ))


(use-package magit
  :straight t)

(use-package rg
  :straight t
  :init
  (rg-enable-default-bindings))


(setq compilation-error-regexp-alist '(clang-note clang-warning clang-error clang-fatal-error clang-ld-ref-error))
;; regex file line col type hyperlink highglight
(setq compilation-error-regexp-alist-alist '(
                                             (clang-note "\\(.*\\):\\([0-9]+\\):\\([0-9]+\\): note:" 1 2 3 0)
                                             (clang-warning "\\(.*\\):\\([0-9]+\\):\\([0-9]+\\): warning:" 1 2 3 1)
                                             (clang-error "\\(.*\\):\\([0-9]+\\):\\([0-9]+\\): error:" 1 2 3 2)
                                             (clang-fatal-error "\\(.*\\):\\([0-9]+\\):\\([0-9]+\\): fatal error:" 1 2 3 2)
                                             (clang-ld-ref-error ">>> referenced by \\(.*\\):\\([0-9]+\\)" 1 2 nil 2)
                                             ))


;; https://stackoverflow.com/questions/3860028/customizing-emacs-gdb
(setq gdb-many-windows nil)

(defun set-gdb-layout(&optional c-buffer)
  (if (not c-buffer)
      (setq c-buffer (window-buffer (selected-window))))

  ;; from http://stackoverflow.com/q/39762833/846686
  (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed
  (switch-to-buffer gud-comint-buffer)
  (delete-other-windows) ;; clean all

  (let* (
         (w-source (selected-window)) ;; left top
         (w-gdb (split-window w-source nil 'right)) ;; right bottom
         (w-locals (split-window w-gdb nil 'above)) ;; right middle bottom
         (w-stack (split-window w-locals nil 'above)) ;; right middle top
         (w-breakpoints (split-window w-stack nil 'above)) ;; right top
         (w-compile (split-window w-source (floor(* 0.9 (window-body-height)))
                                  'below)) ;; left bottom
         )
    (set-window-buffer w-compile (get-buffer-create "*compilation*"))
    (set-window-dedicated-p w-compile t)
    (set-window-buffer w-breakpoints (gdb-get-buffer-create 'gdb-breakpoints-buffer))
    (set-window-dedicated-p w-breakpoints t)
    (set-window-buffer w-locals (gdb-get-buffer-create 'gdb-locals-buffer))
    (set-window-dedicated-p w-locals t)
    (set-window-buffer w-stack (gdb-get-buffer-create 'gdb-stack-buffer))
    (set-window-dedicated-p w-stack t)

    (set-window-buffer w-gdb gud-comint-buffer)

    (select-window w-source)
    (set-window-buffer w-source c-buffer)
    ))

(defadvice gdb (around args activate)
  "Change the way to gdb works."
  (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing)
  (let (
        (c-buffer (window-buffer (selected-window))) ;; save current buffer
        )
    ad-do-it
    (set-gdb-layout c-buffer))
  )

(defadvice gdb-reset (around args activate)
  "Change the way to gdb exit."
  ad-do-it
  (set-window-configuration global-config-editing))

(defun debug-this-app ()
  (interactive)
  (gdb "gdb -i=mi -x ~/Project/HandmadeHero/misc/gdb-script.txt /home/david/Project/HandmadeHero/build/linux_main.out"))

(defun compile-this-app ()
  (interactive)
  (save-some-buffers t)
  (compile "bash ~/Project/HandmadeHero/build.sh"))

(defun run-this-app ()
  (interactive)
  (call-process-shell-command "bash ~/Project/HandmadeHero/run.sh" nil 0))



;; key bindings
(global-set-key (kbd "M-n") 'forward-paragraph)
(global-set-key (kbd "M-p") 'backward-paragraph)

(global-set-key (kbd "C-z") #'undo)
(global-set-key (kbd "M-z") #'undo-redo)

(use-package ace-window
  :straight t)

(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-ignore-current nil)
(setq aw-scope 'frame)
(setq aw-dispatch-always t)

(setq aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
	(?q delete-other-windows "Maximize current window")
        (?z aw-swap-window "Swap Windows")
	(?m aw-move-window "Move Window")
	(?c aw-copy-window "Copy Window")
	(?b aw-switch-buffer-in-window "Select Buffer")
	(?r aw-switch-buffer-other-window "Switch Buffer Other Window")
	(?t aw-flip-window "Flip Window")
	(?w aw-split-window-fair "Split Fair Window")
	(?v aw-split-window-vert "Split Vert Window")
	(?i aw-split-window-horz "Split Horz Window")
	(?? aw-show-dispatch-help)))

(global-set-key (kbd "M-o") 'ace-window)



(use-package hydra
  :straight t)

(defhydra hydra-edit ()
  "
Window                 Buffer               Edit
-----------------------------------------------------
                       _r_: recent file     
                       _f_: find file       
_Q_: close window      _b_: list buffer     
                       _p_: prev buffer     _;_: comment
                       _n_: next buffer     _d_: duplicate line
                       _C_: kill buffer     
_h_: win left
_l_: win right
_j_: win down
_k_: win up
"
  ("h" windmove-left)
  ("l" windmove-right)
  ("j" windmove-down)
  ("k" windmove-up)
  ("Q" delete-window)
  ("r" helm-recentf)
  ("f" helm-find-files)
  ("b" helm-buffers-list)
  ("p" previous-buffer)
  ("n" next-buffer)
  (";" comment-line)
  ("d" duplicate-line)
  ("C" kill-buffer)
  )

(global-set-key (kbd "C-,") 'hydra-edit/body)



(defhydra hydra-cpp ()
  "
^Compile^               ^Lint^                ^Edit^               ^LSP^
^^^^^^^^^^^^-------------------------------------------------------------------------
_c_: compile            _j_: next error       _,_: reference       _R_: rename 
_n_: next error         _k_: prev error       _._: definition      _a_: actions
_p_: prev error                               _[_: go back         _F_: format
_r_: run                                      _]_: go froward      
_d_: debug                                    _o_: hpp <-> cpp     
                                              _f_: functions
                                              _/_: apropos
"
  ("c" compile-this-app)
  ("r" run-this-app)
  ("d" debug-this-app)

  ("n" next-error)
  ("p" previous-error)
  ("j" flymake-goto-next-error)
  ("k" flymake-goto-prev-error)

  ("," xref-find-references)
  ("." xref-find-definitions)
  ("/" xref-find-apropos)
  ("[" xref-go-back)
  ("]" xref-go-forward)
  ("o" ff-find-related-file)
  ("f" helm-imenu)

  ("R" eglot-rename)
  ("a" eglot-code-actions)
  ("F" eglot-format)
  )

(add-hook 'c++-mode-hook (lambda ()
                           (local-set-key (kbd "C-.") 'hydra-cpp/body)
                           ))






